import { FastifyRequest, onRequestHookHandler } from "fastify";
import { getTokenVerifier } from "../infrastructure/authTokens";
import { tokenSecret, tokenAlgorithm } from "../settings/userTokenSettings";

const verifyToken = getTokenVerifier({ secret: tokenSecret, algorithm: tokenAlgorithm });

function parseAuthorization(authorizationHeader: string): string {
    const tokenRegExp = /^bearer +(.*)$/i;
    const matches = authorizationHeader.match(tokenRegExp);
    if (!matches) {
        return '';
    }
    return matches[1];
}

function extractUserToken(request: FastifyRequest): string | null {
    if (request.headers.authorization) {
        return parseAuthorization(request.headers.authorization);
    } else if (request.cookies.user) {
        return request.cookies.user;
    } else {
        return null;
    }
}

const userContextHook: onRequestHookHandler = function(request, response, next) {
    try {
        const userToken = extractUserToken(request);
        if (userToken) {
            const payload = verifyToken(userToken);
            request.userContext = {
                identification: {
                    issuer: payload.iss,
                    subject: payload.sub
                },
                attributes: {
                    issuer: payload.iss,
                    attributes: Object.assign(
                        {},
                        payload.attr,
                        // We add a "special" attribute _subject so that it's possible to grant permissions
                        //  to users based on who they are. The default grant is generated by
                        //  getDefaultAttributeSelectorForUser(), and is applied e.g. when creating a new
                        //  filesystem so that *somebody* can access it and delegate permissions further.
                        { _subject: [ payload.sub ] }
                    )
                },
                canCreateFilesystems: (payload.cap || []).includes('create-fs')
            };
        }
    } catch (error) {
        request.log.warn({ err: error }, 'User token validation failed')
    } finally {
        next();
    }
};

export default userContextHook;
